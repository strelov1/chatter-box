config:
  target: "http://localhost:80"
  phases:
    - duration: 5
      arrivalRate: 5
      name: "Warm up"
    - duration: 60
      arrivalRate: 30
      name: "Sustained load step"
  socketio:
    transports: ['websocket']
  plugins:
    ensure: {}
  ensure:
    thresholds:
      - 'socketio.response_time.mean': 200

before:
  flow:
    - post:
        url: "/api/v1/auth/register"
        json:
          username: "{{ $randomString(10) }}"
          password: "password123"
        capture:
          - json: "$.userId"
            as: "userId1"
          - json: "$.userName"
            as: "userName1"
    - post:
        url: "/api/v1/auth/register"
        json:
          username: "{{ $randomString(10) }}"
          password: "password123"
        capture:
          - json: "$.userId"
            as: "userId2"
          - json: "$.userName"
            as: "userName2"
    - post:
        url: "/api/v1/auth/login"
        json:
          username: "{{ userName1 }}"
          password: "password123"
        capture:
          - json: "$.authKey"
            as: "authKey1"

scenarios:
  - engine: "socketio"
    socketio:
      extraHeaders:
        authorization: "{{ authKey1 }}"
    flow:
      - emit:
          channel: "group:create"
          data:
            name: "Test Group {{ $randomNumber(1, 1000) }}"
            members: ["{{ userId1 }}", "{{ userId2 }}"]
        response:
          on: "group:created"
          capture:
            json: "$[0]._id"
            as: "createdGroupId"
      #- log: "Group is created: {{ createdGroupId }}"
      - loop:
          - emit:
              channel: "message:create"
              data:
                groupId: "{{ createdGroupId }}"
                text: "Hello World!"
            response:
              on: "message:created"
              match:
                - json: "$[0]._id"
                  value: "{{ createdGroupId }}"
        count: 500